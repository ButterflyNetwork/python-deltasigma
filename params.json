{"name":"python-deltasigma","tagline":"The MATLAB Delta Sigma Toolbox with 0% MATLAB and a lot more Python","body":"The **python-deltasigma** is a Python package to *synthesize, simulate, scale and map to implementable topologies* **[ΔΣ modulators](https://en.wikipedia.org/wiki/Delta-sigma_modulation)**.\r\n\r\nIt aims to provide **a 1:1 Python port** of Richard Schreier's ***excellent*** \r\n**[MATLAB Delta Sigma Toolbox](http://www.mathworks.com/matlabcentral/fileexchange/19-delta-sigma-toolbox)**,\r\nthe *de facto* standard tool for high-level delta sigma simulation, upon which it is very heavily based.[![githalytics.com alpha](https://cruel-carlota.pagodabox.com/36f25accf60f391456efe66910bf84f8 \"githalytics.com\")](http://githalytics.com/ggventurini/python-deltasigma)\r\n\r\n# Status\r\n\r\nThis project is a work in progress and you are welcome to help improve it.\r\n\r\nNot all functionality has been ported. Take a look at [files.csv](https://github.com/ggventurini/python-deltasigma/blob/master/files.csv) for the current status.\r\n\r\n[![Build Status](https://travis-ci.org/ggventurini/python-deltasigma.png?branch=master)](https://travis-ci.org/ggventurini/python-deltasigma) [![Coverage Status](https://coveralls.io/repos/ggventurini/python-deltasigma/badge.png?branch=master)](https://coveralls.io/r/ggventurini/python-deltasigma?branch=master)\r\n[![PyPi version](http://img.shields.io/badge/version-0.1-brightgreen.png)](https://pypi.python.org/pypi/deltasigma/)\r\n[![PyPi downloads](https://pypip.in/download/deltasigma/badge.png)](https://pypi.python.org/pypi/deltasigma/)\r\n[![BSD 2 clause license](http://img.shields.io/badge/license-BSD%20%282%20clause%29-brightgreen.png)](https://raw.githubusercontent.com/ggventurini/python-deltasigma/master/LICENSE)\r\n\r\nTo have an idea of the currently implemented functionality, take a look at these [IPython](http://ipython.org/) notebooks:\r\n\r\n* **[dsdemo1](http://nbviewer.ipython.org/urls/raw.githubusercontent.com/ggventurini/python-deltasigma/master/examples/dsdemo1.ipynb)**, notebook port of the interactive `dsdemo1.m`.\r\n* **[dsdemo2](http://nbviewer.ipython.org/urls/raw.githubusercontent.com/ggventurini/python-deltasigma/master/examples/dsdemo2.ipynb)**, notebook port of the interactive `dsdemo2.m`.\r\n* **[dsdemo3](http://nbviewer.ipython.org/urls/raw.githubusercontent.com/ggventurini/python-deltasigma/master/examples/dsdemo3.ipynb)**, notebook port of the interactive `dsdemo3.m`.\r\n* **[dsdemo4](http://nbviewer.ipython.org/urls/raw.githubusercontent.com/ggventurini/python-deltasigma/master/examples/dsdemo4.ipynb)**, notebook port of `dsdemo4.m`. [Audio file, right click to download](https://raw.githubusercontent.com/ggventurini/python-deltasigma/master/examples/sax.wav.b64).\r\n* **[dsexample1](http://nbviewer.ipython.org/urls/raw.githubusercontent.com/ggventurini/python-deltasigma/master/examples/dsexample1.ipynb)**, python version of `dsexample1.m`.\r\n* **[dsexample2](http://nbviewer.ipython.org/urls/raw.githubusercontent.com/ggventurini/python-deltasigma/master/examples/dsexample2.ipynb)**, python version of `dsexample2.m`.\r\n* **[dsexample3](http://nbviewer.ipython.org/urls/raw.githubusercontent.com/ggventurini/python-deltasigma/master/examples/dsexample3.ipynb)**, python version of `dsexample3.m`.\r\n\r\nIf you have some examples you would like to share, [send me a mail](http://tinymailto.com/5310), and I will add them to the above list.\r\n\r\nFurther functionality is expected to be ported according to [the ROADMAP](https://github.com/ggventurini/python-deltasigma/blob/master/ROADMAP.md).\r\n\r\n## Install\r\n\r\n### Supported platforms\r\n\r\npython-deltasigma runs on every platform and arch. supported by its dependencies:\r\n\r\n * *Platforms*: Linux, Mac OS X, Windows.\r\n\r\n * *Archs*: x86, x86_64 and armf (arm with floating point unit).\r\n\r\n### Dependencies\r\n\r\nUsing python-deltasigma requires **Python 2** or **3**, **numpy**, **scipy** (>= 0.11.0) and **matplotlib**.\r\n\r\nThey are packaged by virtually all the major *Linux distributions*. \r\n\r\nOn a Debian Linux system, you may install them issuing:\r\n\r\n```\r\n # aptitude install python python-numpy python-scipy python-matplotlib\r\n```\r\n\r\nRefer to your system documentation for more information.\r\n\r\nOn *Windows*, I hear good things about: \r\n\r\n * [Enthought Canopy](https://www.enthought.com/store/), a Python distribution \r\nthat carries both free and commercial versions, and\r\n \r\n * [Anaconda](https://store.continuum.io/cshop/anaconda/), \r\nwhich offers its full version for free. \r\n\r\nI do not run Windows, so I can't really provide more info (sorry), except \r\nthat people tell me they manage to have a working setup. \r\n\r\n*Mac OS X* is also supported by [Enthought Canopy](https://www.enthought.com/store/)\r\nand [Anaconda](https://store.continuum.io/cshop/anaconda/), which likely\r\nprovide the easiest and fastest solution to have a scientific Python stack up \r\nand running.\r\n\r\nMore information can be found on the \r\n[scipy install page](http://www.scipy.org/install.html) and on the \r\n[matplotlib homepage](http://matplotlib.org/).\r\n\r\nI wrote in a different context some directions to [compile numpy and scipy yourself](https://github.com/ahkab/ahkab/wiki/Install:-numpy-and-scipy), which also apply here. Be warned, it can easily get complicated.\r\n\r\n### Install python-deltasigma\r\n\r\nYou can install the latest stable version directly from the [Python\r\nPackage Index (PYPI)](http://pypi.python.org), running:\r\n\r\n    pip install deltasigma\r\n\r\nThe above command will also attempt to compile and install the\r\ndependencies -for this to work you should already have the required\r\nlibraries in place.\r\n\r\nOtherwise, you can download the code from [the Github\r\nrepository](http://github.com/ggventurini/python-deltasigma).\r\n\r\nThen run:\r\n\r\n    python setup.py install\r\n\r\nThe flag `--local` may be an interesting option to install the package\r\nfor the current user only, and it doesn't require root privileges.\r\n\r\n\r\n### Extras\r\n\r\nBuilding the documentation requires the **[sphinx](http://sphinx-doc.org/)** package. It is an optional step, as the [the latest documentation is available online](http://python-deltasigma.readthedocs.org/en/latest/), without need for you to build it.\r\n\r\nIf you plan to run the provided unit tests, then you should install \r\n**[setuptools](https://pypi.python.org/pypi/setuptools)**, used to access the \r\nreference function outputs. Testing *can* be automated with \r\n**[nose](https://pypi.python.org/pypi/nose/)**, issuing \r\n`$ nosetests -v deltasigma/*.py`.\r\n\r\n## Documentation\r\n\r\n1. You can find the included [package documentation online](http://python-deltasigma.readthedocs.org/en/latest/).\r\n\r\n2. The original MATLAB Toolbox provides in-depth documentation, which is very useful to understand what the toolbox is capable of. See [DSToolbox.pdf](https://github.com/ggventurini/python-deltasigma/blob/master/delsig/DSToolbox.pdf?raw=true) and [OnePageStory.pdf](https://github.com/ggventurini/python-deltasigma/blob/master/delsig/OnePageStory.pdf?raw=true) (*PDF warning*).\r\n\r\n3. The book:\r\n\r\nRichard Schreier, Gabor C. Temes, *Understanding Delta-Sigma Data Converters*, ISBN: 978-0-471-46585-0, November 2004, Wiley-IEEE Press \r\n\r\nis probably *the most authoritative resource on the topic*. Chapter 8-9 show how to use the MATLAB toolkit and the observations apply also to this Python port. Links [on amazon](http://www.amazon.com/Understanding-Delta-Sigma-Converters-Richard-Schreier/dp/0471465852), [on the Wiley-IEEE press](http://eu.wiley.com/WileyCDA/WileyTitle/productCd-0471465852,miniSiteCd-IEEE2.html). \r\n\r\n*I am not affiliated with neither the sellers nor the authors.*\r\n\r\n## How to contribute\r\n\r\nPull requests are welcome!\r\n\r\nThere are only a few *guidelines*, which can be overridden every time it is reasonable to do so:\r\n\r\n* Please try to follow `PEP8`.\r\n\r\n* Try to keep the functions signature identical. Parameters with `NaN` default values have their default value replaced with `None`. \r\n\r\n* If a function has a varible number of return values, its Python port should implement the maximum number of return values.\r\n\r\n### Support python-deltasigma\r\n\r\n*I do not want your money.* I develop this software because I enjoy it and because I use it myself.\r\n\r\nIf you wish to support the development of `python-deltasigma` or you find the package useful or you otherwise wish to contribute monetarily, ***please donate to cancer research instead:*** \r\n\r\n* **[Association for International Cancer Research *(eng)*](http://www.aicr.org.uk/donate.aspx)**, or \r\n* **[Fond. IRCCS Istituto Nazionale dei Tumori *(it)*](http://www.istitutotumori.mi.it/modules.php?name=Content&pa=showpage&pid=24)**.\r\n\r\nConsider [sending me a mail](http://tinymailto.com/5310) afterwards, ***it makes for great motivation!***\r\n\r\n### Why this project was born\r\n\r\nI like challenges, Delta Sigma modulation and I don't have the money for my own MATLAB license.\r\n\r\nWith this Python package you can simulate Delta Sigma modulators for free, on any PC. \r\n\r\nI hope you find it useful.\r\n\r\n## Licensing and copyright notice\r\n\r\nAll original MATLAB code is Copyright (c) 2009, Richard Schreier. \r\nSee the LICENSE file for the licensing terms.\r\n\r\nThe Python code here provided is a derivative work from the above toolkit and \r\nsubject to the same license terms.\r\n\r\nThis package contains some source code from `pydsm`, also based on the same \r\nMATLAB toolbox. The `pydsm` package is copyright (c) 2012, Sergio Callegari.\r\n\r\nWhen not otherwise specified, the Python code is Copyright 2013, Giuseppe \r\nVenturini and the python-deltasigma contributors.\r\n\r\nMATLAB is a registered trademark of The MathWorks, Inc.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}